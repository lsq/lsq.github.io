<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux command tools on Hugo blog</title>
    <link>https://lsq.github.io/categories/linux-command-tools/</link>
    <description>Recent content in linux command tools on Hugo blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 Nov 2020 10:51:10 +0800</lastBuildDate><atom:link href="https://lsq.github.io/categories/linux-command-tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>shell查找文件中包含中文的行</title>
      <link>https://lsq.github.io/posts/git_clone%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Fri, 13 Nov 2020 10:51:10 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git_clone%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0/</guid>
      <description>windwos 系统中git clone 下来文件名乱码原因  github上的文件名原来的编码就utf-8编码 git clone 下来的uft-8编码被转为gb18030编码，因为中文的utf-8编码占用3个字节，中文的gb18030只占用两个字节(1,2,4)，会把utf-8三个中的两个字节（此时被当作gb18030编码）再转为utf-8（三个字节），其中遇到错误时会被舍弃，如不想舍弃，需要用到&amp;ndash;byte-subst参数，然后再用printf或者echo -e来重新编码。 pc@pc-PC MINGW64 /g/tmp/t/LaTeX_Notes  echo -en echo -en &amp;quot;texlive安装包下载地址&amp;quot;|iconv --byte-subst=&amp;quot;\x%2x&amp;quot; -t utf-8 -f gb18030|iconv &amp;ndash;byte-subst=&amp;quot;\x%2x&amp;quot; -f utf-8 -t gb18030 texlive安装包下载地▒\x80 pc@pc-PC MINGW64 /g/tmp/t/LaTeX_Notes</description>
    </item>
    
    <item>
      <title>shell查找文件中包含中文的行</title>
      <link>https://lsq.github.io/posts/shell%E6%9F%A5%E6%89%BE%E4%B8%AD%E6%96%87charactor/</link>
      <pubDate>Tue, 10 Nov 2020 10:51:10 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/shell%E6%9F%A5%E6%89%BE%E4%B8%AD%E6%96%87charactor/</guid>
      <description>shell查找文件中包含中文的行 awk &#39;/[^!-~]/&#39; file
asscii码从!到~中包含所有的大小写字母，和英文符号
cat file | grep &amp;quot;[^\u4e00-\u9fa5]&amp;quot;</description>
    </item>
    
    <item>
      <title>vim中自动格式化代码</title>
      <link>https://lsq.github.io/posts/vim%E4%B8%AD%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 10 Jan 2020 20:02:42 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/vim%E4%B8%AD%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid>
      <description>vim中自动格式化代码 在vim中其实也有像Eclipse中的ctrl + shift +F 的自动格式化代码的操作，尽管非常强大，但是通常会破坏代码的原有的缩进，
所以不建议在python这样缩进代替括号的语言中和源程序已经缩进过的代码中使用，废话少说，下面说步骤：
  gg 跳转到第一行</description>
    </item>
    
    <item>
      <title>Git submodule错误操作</title>
      <link>https://lsq.github.io/posts/git-submodule/</link>
      <pubDate>Wed, 18 Dec 2019 21:16:35 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git-submodule/</guid>
      <description>IDEA中GIt克隆时报：
 Server does not allow request for unadvertised object //工程针对子模块最近提交的改动ID</description>
    </item>
    
    <item>
      <title>git 撤回提交</title>
      <link>https://lsq.github.io/posts/git-reset/</link>
      <pubDate>Wed, 18 Dec 2019 21:15:28 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git-reset/</guid>
      <description>写完代码后，我们一般这样
git add . //添加所有文件 git commit -m &amp;#34;本功能全部完成&amp;#34; 撤回commit 执行完commit后，想撤回commit，怎么办？ 这样凉拌：</description>
    </item>
    
    <item>
      <title>Vim search visual text</title>
      <link>https://lsq.github.io/posts/vim_search_visual_text/</link>
      <pubDate>Mon, 18 Nov 2019 14:40:41 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/vim_search_visual_text/</guid>
      <description>vim 搜索光标下文字 / substitute 操作同样  Or you can simply yank the selected text with y and go to search mode /, then you can paste the last yanked text with Ctrl+R 0</description>
    </item>
    
    <item>
      <title>Complete Sed Command Guide</title>
      <link>https://lsq.github.io/posts/sed-reference-guide/</link>
      <pubDate>Mon, 18 Nov 2019 18:04:57 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/sed-reference-guide/</guid>
      <description>Complete Sed Command Guide [Explained with Practical Examples] In a previous article, I showed the basic usage of Sed, the stream editor, on a practical use case.</description>
    </item>
    
  </channel>
</rss>
