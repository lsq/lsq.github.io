<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BOS on lsq 的博客</title>
    <link>https://lsq.github.io/categories/bos/</link>
    <description>Recent content in BOS on lsq 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;br /&gt;&lt;br /&gt;背景使用了 &lt;a href=&#34;https://www.pexels.com/zh-cn/&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt; 上 &lt;a href=&#34;https://www.pexels.com/zh-cn/@minan1398&#34; target=&#34;_blank&#34;&gt;Min An&lt;/a&gt; 拍摄的&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/1454794/&#34; target=&#34;_blank&#34;&gt;图片&lt;/a&gt;。</copyright>
    <lastBuildDate>Wed, 29 Mar 2023 10:29:48 +0800</lastBuildDate><atom:link href="https://lsq.github.io/categories/bos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python插件---表单插件.终止工作流</title>
      <link>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6.%E7%BB%88%E6%AD%A2%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Wed, 29 Mar 2023 10:29:48 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6.%E7%BB%88%E6%AD%A2%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>二开案例.表单插件.终止工作流 C#代码 【应用场景】通过插件的方式，对已启动流程的单据，执行终止流程操作（仅终止流程，不执行反审核操作）。 【案</description>
    </item>
    
    <item>
      <title>Python插件---列表插件.读写用户参数</title>
      <link>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6.%E8%AF%BB%E5%86%99%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B0/</link>
      <pubDate>Wed, 29 Mar 2023 10:29:48 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6.%E8%AF%BB%E5%86%99%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B0/</guid>
      <description>二开案例.列表插件.读写用户参数 C#代码 【应用场景】使用列表插件读写用户参数。 【案例演示】采购订单，列表界面，在列表插件中读写用户参数。 原文</description>
    </item>
    
    <item>
      <title>Python插件---列表插件.隐藏列</title>
      <link>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6.%E9%9A%90%E8%97%8F%E5%88%97/</link>
      <pubDate>Wed, 29 Mar 2023 10:29:48 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E4%BA%8C%E5%BC%80%E6%A1%88%E4%BE%8B.%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6.%E9%9A%90%E8%97%8F%E5%88%97/</guid>
      <description>二开案例.列表插件.隐藏列 C#代码 【应用场景】使用列表插件对列表的列是否显示隐藏进行干预。 注意：通过此方案隐藏列是针对所有过滤方案生效。 【案</description>
    </item>
    
    <item>
      <title>Python插件---生产订单手工结案原因</title>
      <link>https://lsq.github.io/posts/%E7%94%9F%E4%BA%A7%E8%AE%A2%E5%8D%95.%E5%BC%BA%E5%88%B6%E7%BB%93%E6%A1%88%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Wed, 29 Mar 2023 10:29:48 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/%E7%94%9F%E4%BA%A7%E8%AE%A2%E5%8D%95.%E5%BC%BA%E5%88%B6%E7%BB%93%E6%A1%88%E5%8E%9F%E5%9B%A0/</guid>
      <description>表单插件 #引入clr运行库 import clr #添加对cloud插件开发的常用组件的引用 clr.AddReference(&amp;#39;System&amp;#39;) clr.AddReference(&amp;#39;System.Data&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.DataEntity&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.Core&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.App&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.App.Core&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.ServiceHelper&amp;#39;) #导入cloud基础库中的常用实体对象（分命名空间导</description>
    </item>
    
    <item>
      <title>Python插件常见报错原因</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Mon, 12 Dec 2022 10:29:48 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0/</guid>
      <description>Python表单插件报错 常用引用 import clr clr.AddReference(&amp;#39;Kingdee.BOS.App&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.DataEntity&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.Core&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.ServiceHelper&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS.Contracts&amp;#39;) clr.AddReference(&amp;#39;Kingdee.BOS&amp;#39;) clr.AddReference(&amp;#39;System.Data&amp;#39;) clr.AddReference(&amp;#39;System&amp;#39;) clr.AddReference(&amp;#34;System.Core&amp;#34;) clr.AddReference(&amp;#34;Kingdee.BOS&amp;#34;) clr.AddReference(&amp;#34;Kingdee.BOS.Log&amp;#34;) clr.AddReference(&amp;#39;Newtonsoft.Json&amp;#39;) from System import * from System.Data import * from System.Text import * from System.Linq import * from System.Collections import * from System.Collections.Generic import * from Kingdee.BOS.JSON import * from Kingdee.BOS.Core import * from Kingdee.BOS.Core.Const import * from Kingdee.BOS.Core.Bill import *</description>
    </item>
    
    <item>
      <title>列表插件批量修改单据字段</title>
      <link>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%8D%95%E6%8D%AE%E5%AD%97%E6%AE%B5-%E8%BF%9B%E9%98%B6%E7%89%88/</link>
      <pubDate>Wed, 23 Nov 2022 15:28:51 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%8D%95%E6%8D%AE%E5%AD%97%E6%AE%B5-%E8%BF%9B%E9%98%B6%E7%89%88/</guid>
      <description>前面分享了：**Python实现单据批改(单据头字段)，**有小伙伴问我：想批改明细字段怎么办呢？ 我这里分享一下用Python列表插件如何批</description>
    </item>
    
    <item>
      <title>单据列表插件示例</title>
      <link>https://lsq.github.io/posts/python%E5%8D%95%E6%8D%AE%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 05 Aug 2022 09:27:57 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E5%8D%95%E6%8D%AE%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>往期回顾： 【Python插件入门】第1篇：****Python插件入门讲解 【Python插件入门】第2篇：****基本开发过程介绍 【Pyth</description>
    </item>
    
    <item>
      <title>Python数据包操作</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 26 Jul 2022 17:05:00 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</guid>
      <description>上一篇：第2篇：基本开发过程介绍 大家好，今天我们来讲一讲如何在插件中如何进行数据操作，实现一个开发功能，无非是对数据进行各种逻辑处理，那么我</description>
    </item>
    
    <item>
      <title>表单插件简介</title>
      <link>https://lsq.github.io/posts/python%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%9D%BF%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 26 Jul 2022 17:05:00 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%9D%BF%E7%A4%BA%E4%BE%8B/</guid>
      <description>言归正传，前面我们学习了Python插件代码的构成&amp;quot;三部曲&amp;quot;，其中比较重要的一部分就是**【方法/函数】，再结合上一篇我</description>
    </item>
    
    <item>
      <title>Python列表动态创建列</title>
      <link>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%88%97/</link>
      <pubDate>Tue, 01 Mar 2022 14:39:38 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%88%97/</guid>
      <description>Python列表动态创建列 应用场景 列表界面上不依赖过滤方案指定的显示隐藏列配置，通过插件的方式动态的创建列并动态的给列赋值。 案例演示 打开采购</description>
    </item>
    
    <item>
      <title>Python列表插件查询行内码(保存提交审核操作)</title>
      <link>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6%E6%9F%A5%E8%AF%A2%E8%A1%8C%E5%86%85%E7%A0%81/</link>
      <pubDate>Tue, 15 Feb 2022 15:36:04 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E5%88%97%E8%A1%A8%E6%8F%92%E4%BB%B6%E6%9F%A5%E8%AF%A2%E8%A1%8C%E5%86%85%E7%A0%81/</guid>
      <description>Python列表插件查询行内码 应用场景 功能实现需要插件干预，不方便部署C#插件，且业务逻辑较为简单的业务场景。 案例演示&amp;mdash;实现步骤</description>
    </item>
    
    <item>
      <title>Python插件执行数据库操作示例</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%89%A7%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Tue, 21 Dec 2021 08:47:46 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%89%A7%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/</guid>
      <description>操作数据库示例 1 import clr clr.AddReference(&amp;#34;Kingdee.BOS&amp;#34;) clr.AddReference(&amp;#34;Kingdee.BOS.Core&amp;#34;) clr.AddReference(&amp;#34;Kingdee.BOS.App&amp;#34;) from Kingdee.BOS.App.Data import * from Kingdee.BOS import * from System import * def BarItemClick(e): if e.BarItemKey == &amp;#34;tbHello&amp;#34;: this.View.ShowMessage(&amp;#34;操作开始&amp;#34;); DBUtils.Execute(this.Context,</description>
    </item>
    
    <item>
      <title>Python插件测试</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 20 Dec 2021 08:47:46 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%B5%8B%E8%AF%95/</guid>
      <description>Python插件测试 应用场景 功能实现需要插件干预，不方便部署C#插件，且业务逻辑较为简单的业务场景。 案例演示&amp;mdash;实现步骤 1. 登录BO</description>
    </item>
    
    <item>
      <title>Python插件常用事件方法</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 20 Dec 2021 08:47:46 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%96%B9%E6%B3%95/</guid>
      <description>Python插件常用事件方法 常用事件方法 获取单据体总行数 rows=this.Model.GetEntryRowCount(&amp;#34;单据体的</description>
    </item>
    
    <item>
      <title>Python插件弹窗确认与执行</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E5%BC%B9%E7%AA%97%E7%A1%AE%E8%AE%A4%E4%B8%8E%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 20 Dec 2021 08:47:46 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E5%BC%B9%E7%AA%97%E7%A1%AE%E8%AE%A4%E4%B8%8E%E6%89%A7%E8%A1%8C/</guid>
      <description>Python插件弹窗确认与执行 应用场景 用户编辑单据后，点击按钮后提示并要求确认 方案 在表单插件中增加python插件 import clr; clr.AddReference(&amp;#34;System&amp;#34;) clr.AddReference(&amp;#34;Kingdee.BOS.Core&amp;#34;) from System import Action from Kingdee.BOS.Core.DynamicForm import MessageBoxResult from</description>
    </item>
    
    <item>
      <title>python插件提交后刷新当前单据</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%90%8E%E9%87%8A%E6%94%BE%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%85%B3%E9%97%AD/</link>
      <pubDate>Mon, 20 Dec 2021 08:47:46 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%90%8E%E9%87%8A%E6%94%BE%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%85%B3%E9%97%AD/</guid>
      <description>Python插件提交后刷新当前单据 应用场景 用户编辑单据后，点击提交启动了工作流示例，此时并没有释放网络控制，其他用户打开该单据会有如下 提示 方</description>
    </item>
    
    <item>
      <title>Python插件---操作执行后事物结束前修改单据数据包</title>
      <link>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%89%A7%E8%A1%8C%E5%90%8E%E4%BA%8B%E7%89%A9%E7%BB%93%E6%9D%9F%E5%89%8D%E4%BF%AE%E6%94%B9%E5%8D%95%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/python%E6%8F%92%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%89%A7%E8%A1%8C%E5%90%8E%E4%BA%8B%E7%89%A9%E7%BB%93%E6%9D%9F%E5%89%8D%E4%BF%AE%E6%94%B9%E5%8D%95%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%8C%85/</guid>
      <description>二开案例.服务插件.操作执行后事物结束前修改单据数据包 【应用场景】在单据的某个操作执行后，且该操作的外围事务尚未结束前，修改单据的数据包并在</description>
    </item>
    
  </channel>
</rss>
