<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lsq 的博客</title>
    <link>https://lsq.github.io/posts/</link>
    <description>Recent content in Posts on lsq 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;br /&gt;&lt;br /&gt;背景使用了 &lt;a href=&#34;https://www.pexels.com/zh-cn/&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt; 上 &lt;a href=&#34;https://www.pexels.com/zh-cn/@minan1398&#34; target=&#34;_blank&#34;&gt;Min An&lt;/a&gt; 拍摄的&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/1454794/&#34; target=&#34;_blank&#34;&gt;图片&lt;/a&gt;。</copyright>
    <lastBuildDate>Sun, 11 Apr 2021 09:37:25 +0800</lastBuildDate><atom:link href="https://lsq.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://lsq.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://lsq.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Ruby Spider 人力资源网站和Power Query合并查询</title>
      <link>https://lsq.github.io/posts/ruby_power_query/</link>
      <pubDate>Sun, 11 Apr 2021 09:37:25 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/ruby_power_query/</guid>
      <description>背景 去年疫情影响，深圳市政府人力资源和社会保障局出台了“以工代训”补贴政策，这个项目我做完了后在一体化平台查询到有公示，但具体是哪天公示的（</description>
    </item>
    
    <item>
      <title>pdf去除空白边及转为png</title>
      <link>https://lsq.github.io/posts/pdf_crop/</link>
      <pubDate>Wed, 09 Dec 2020 17:09:52 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/pdf_crop/</guid>
      <description>Crop white space of pdf and using gs convert to png PDFCROP takes a PDF file as input, calculates the BoundingBox for each page by the help of ghostscript and generates a output PDF file with removed margins.pdfcrop Normally pdfcrop will be installed by the TeX system. https://superuser.com/questions/415707/export-excel-graphs-as-vector-graphics-files-e-g-svgs briss/xltoolbox Export Excel chart to SVG creates an empty file pdfcrop foo.pdf f.pdf gswin64c.exe -dNOPAUSE -sDEVICE=png16m -r600 -sOutputFile=foo.png o.pdf -dBATCH Sub SaveSelectedChartAsPng()</description>
    </item>
    
    <item>
      <title>vba导出pdf或者png</title>
      <link>https://lsq.github.io/posts/vba_export_png/</link>
      <pubDate>Wed, 09 Dec 2020 17:09:52 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/vba_export_png/</guid>
      <description>Intro These code are to export a chart from Excel to .png and .pdf extensions. How to proceed go to Tools &amp;gt; Macro &amp;gt; Visual Basic Editor. In the new window, select Insert &amp;gt; Module and copy some from codes available (SaveSelectedChartAsPDF or SaveSelectedChartAsImage) or in the blank page. Then go to File &amp;gt; Close &amp;gt; Return to Microsoft Excel Select a chart that you want to export Tools &amp;gt;</description>
    </item>
    
    <item>
      <title>git_clone中文乱码原因</title>
      <link>https://lsq.github.io/posts/git_clone_unicode/</link>
      <pubDate>Fri, 13 Nov 2020 10:51:10 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git_clone_unicode/</guid>
      <description>windwos 系统中git clone 下来文件名乱码原因 github上的文件名原来的编码就utf-8编码 git clone 下来的uft-8编码被转为gb18030编码，因为中文</description>
    </item>
    
    <item>
      <title>shell查找文件中包含中文的行</title>
      <link>https://lsq.github.io/posts/find_chinese/</link>
      <pubDate>Tue, 10 Nov 2020 10:51:10 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/find_chinese/</guid>
      <description>shell查找文件中包含中文的行 awk &#39;/[^!-~]/&#39; file asscii码从!到~中包含所有的大小写字母，和英文符号 cat file | grep &amp;quot;[^\u4e00-\u9fa5]&amp;quot;</description>
    </item>
    
    <item>
      <title>c&#43;&#43;泛型编程与模板元编程</title>
      <link>https://lsq.github.io/posts/c&#43;&#43;_generic_program_and_meta_programming/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/c&#43;&#43;_generic_program_and_meta_programming/</guid>
      <description>写在前面 今天来写点有点难度的东东：泛型编程与模板元编程。 写这种生僻的东东我是比较排斥的，但谁让我看到boost库中专门对这两个东东分了个大类</description>
    </item>
    
    <item>
      <title>初学者软件设计学习方法</title>
      <link>https://lsq.github.io/posts/design_pattern/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/design_pattern/</guid>
      <description>相关资料 可阅读王垠的 解密“设计模式”，不远要辩证地从历史角度去看，现代程序语言中加入了很多特性，不必刻意去使用某种设计模式。 先好好写代码，有</description>
    </item>
    
    <item>
      <title>走近周恩来</title>
      <link>https://lsq.github.io/posts/%E8%B5%B0%E8%BF%9B%E5%91%A8%E6%81%A9%E6%9D%A5/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/%E8%B5%B0%E8%BF%9B%E5%91%A8%E6%81%A9%E6%9D%A5/</guid>
      <description>本文摘自《走近周恩来》，权延赤著，人民日报出版社出版 周恩来不是帅才。我曾经难以容忍这个观点或这句话，以为这是对我心目中至圣至伟的周恩来的莫大</description>
    </item>
    
    <item>
      <title>vim中自动格式化代码</title>
      <link>https://lsq.github.io/posts/vim_format_code/</link>
      <pubDate>Fri, 10 Jan 2020 20:02:42 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/vim_format_code/</guid>
      <description>vim中自动格式化代码 在vim中其实也有像Eclipse中的ctrl + shift +F 的自动格式化代码的操作，尽管非常强大，但是通常会破坏代码的原有的缩</description>
    </item>
    
    <item>
      <title>Git submodule错误操作</title>
      <link>https://lsq.github.io/posts/git-submodule/</link>
      <pubDate>Wed, 18 Dec 2019 21:16:35 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git-submodule/</guid>
      <description>IDEA中GIt克隆时报： Server does not allow request for unadvertised object //工程针对子模块最近提交的改动ID 误操作后工程最近改动为： -Subproject commit //工程针对子模块上次提交的改动I</description>
    </item>
    
    <item>
      <title>git 撤回提交</title>
      <link>https://lsq.github.io/posts/git-reset/</link>
      <pubDate>Wed, 18 Dec 2019 21:15:28 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/git-reset/</guid>
      <description>写完代码后，我们一般这样 git add . //添加所有文件 git commit -m &amp;#34;本功能全部完成&amp;#34; 撤回commit 执行完commit后，想撤回commi</description>
    </item>
    
    <item>
      <title>Vim search visual text</title>
      <link>https://lsq.github.io/posts/vim_search_visual_text/</link>
      <pubDate>Mon, 18 Nov 2019 14:40:41 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/vim_search_visual_text/</guid>
      <description>vim 搜索光标下文字 / substitute 操作同样 Or you can simply yank the selected text with y and go to search mode /, then you can paste the last yanked text with Ctrl+R 0 select text, v and move yank, y goto search mode, / paste the last yanked text, Ctrl + R, 0 Enter</description>
    </item>
    
    <item>
      <title>Complete Sed Command Guide</title>
      <link>https://lsq.github.io/posts/sed-reference-guide/</link>
      <pubDate>Mon, 18 Nov 2019 18:04:57 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/sed-reference-guide/</guid>
      <description>Complete Sed Command Guide [Explained with Practical Examples] In a previous article, I showed the basic usage of Sed, the stream editor, on a practical use case. Today, be prepared to gain more insight about Sed as we will take an in-depth tour of the sed execution model. This will be also an opportunity to make an exhaustive review of all Sed commands and to dive into their details and subtleties.</description>
    </item>
    
    <item>
      <title>Note 4</title>
      <link>https://lsq.github.io/posts/note-4/</link>
      <pubDate>Sun, 23 Jun 2019 23:13:01 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/note-4/</guid>
      <description>This is a demo test Dim as arr as Integer, brr as String 上面语句用来定议变量</description>
    </item>
    
    <item>
      <title>Note 3</title>
      <link>https://lsq.github.io/posts/note-3/</link>
      <pubDate>Thu, 20 Jun 2019 21:34:52 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/note-3/</guid>
      <description>这是第三个笔记 dim arr as Integer, b as String dim sty as Object</description>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://lsq.github.io/posts/header-image/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/header-image/</guid>
      <description>這是一個簡單的筆記。 ​ ​</description>
    </item>
    
    <item>
      <title>筆記 2</title>
      <link>https://lsq.github.io/posts/note-2/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/note-2/</guid>
      <description>這是一個簡單的筆記。</description>
    </item>
    
    <item>
      <title>筆記 1</title>
      <link>https://lsq.github.io/posts/note-1/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://lsq.github.io/posts/note-1/</guid>
      <description>這是一個簡單的筆記。</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://lsq.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://lsq.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lsq.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
